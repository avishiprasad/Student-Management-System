@page
@model WebApplication4.Pages.StudentFormModel
@{
    ViewData["Title"] = "Student Form";
}

<head>
    <link rel="stylesheet" href="~/css/StudentForm.css" asp-append-version="true" />
</head>

<body>

    <nav class="navbar">
            <button onclick="downloadExcel()">Download Excel</button>
            <button onclick="openSSRSReport()">View SSRS Report</button>

            <div class="dropdown">
                <button class="dropbtn">Other Reports ▼</button>
                <div class="dropdown-content">
                    <a href="#" onclick="openReport('/Training/NameDatabase')">Name Report</a>
                    <a href="#" onclick="openReport('/Training/CityDatabase')">City Report</a>
                    <a href="#" onclick="openReport('/Training/StateDatabase')">State Report</a>
                    <a href="#" onclick="openReport('/Training/CollegeYearDatabase')">College Year Report</a>
                </div>
            </div>
    </nav>

    <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 10px; margin-top: 10px;">
        <h2 style="margin: 0;">All Students</h2>
        <button type="button" onclick="showAddModal()">+</button>
    </div>
    <div id="studentTable"></div>

    <!-- Add Student Modal -->
    <div id="addModal" style="display:none; position:fixed; top:20%; left:50%; transform:translateX(-50%); background:white; padding:20px; box-shadow:0 0 10px rgba(0,0,0,0.3); z-index:1000;">
        <h3>Add New Student</h3>
        <label>Name: <input id="modalName" type="text" /></label><br />
        <label>City: <input id="modalCity" type="text" /></label><br />
        <label>State: <input id="modalState" type="text" /></label><br />
        <label>College Year: <input id="modalCollegeYear" type="number" /></label><br /><br />
        <button onclick="addFromModal()">Add</button>
        <button onclick="hideAddModal()">Cancel</button>
    </div>

</body>

<script>
    const baseViewerUrl = "@Model.SSRSReportViewerUrl";
    const apiBaseUrl = "@Model.StudentApiBaseUrl";

    function openReport(reportPath) {
        const fullUrl = `${baseViewerUrl}?report=${encodeURIComponent(reportPath)}`;
        window.open(fullUrl, '_blank');
    }

    function openSSRSReport() {
        window.open(baseViewerUrl, "_blank");
    }

    async function submitStudent() {
        const student = {
            name: document.getElementById('name').value,
            city: document.getElementById('city').value,
            state: document.getElementById('state').value,
            collegeYear: parseInt(document.getElementById('collegeYear').value)
        };

        const response = await fetch(apiBaseUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(student)
        });

        const msg = document.getElementById('addMessage');
        if (response.ok) {
            msg.innerText = "Student added successfully.";
            msg.className = "success";
            loadAllStudents();
        } else {
            msg.innerText = "Failed to add student.";
            msg.className = "error";
        }
    }

    async function addFromModal() {
        const student = {
            name: document.getElementById('modalName').value,
            city: document.getElementById('modalCity').value,
            state: document.getElementById('modalState').value,
            collegeYear: parseInt(document.getElementById('modalCollegeYear').value)
        };

        const response = await fetch(apiBaseUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(student)
        });

        if (response.ok) {
            hideAddModal();
            loadAllStudents();
        } else {
            alert("Failed to add student.");
        }
    }

    function showAddModal() {
        document.getElementById("addModal").style.display = "block";
    }

    function hideAddModal() {
        document.getElementById("addModal").style.display = "none";
    }

    function filterTableByName() {
        const filter = document.getElementById("searchName").value.toLowerCase();
        const rows = document.querySelectorAll("#studentTable tbody tr");

        rows.forEach(row => {
            const nameCell = row.querySelector("td");
            const name = nameCell?.textContent?.toLowerCase() || "";

            if (name.startsWith(filter)) {
                row.style.display = "";
            } else {
                row.style.display = "none";
            }
        });
    }


    async function deleteStudent() {
        const name = document.getElementById("deleteName").value.trim();
        const msg = document.getElementById("deleteMessage");

        if (!name) {
            msg.innerText = "Please enter a student name to delete.";
            msg.style.color = "red";
            return;
        }

        const response = await fetch(`${apiBaseUrl}/by-name?name=${encodeURIComponent(name)}`, {
            method: 'DELETE'
        });

        if (response.ok) {
            const result = await response.text();
            msg.innerText = result;
            msg.style.color = "green";
            loadAllStudents();
        } else {
            msg.innerText = `Delete failed: ${await response.text()}`;
            msg.style.color = "red";
        }
    }

    async function deleteStudentByName(name) {
        if (!confirm(`Are you sure you want to delete "${name}"?`)) return;

        const response = await fetch(`${apiBaseUrl}/by-name?name=${encodeURIComponent(name)}`, {
            method: 'DELETE'
        });

        if (response.ok) {
            loadAllStudents();
        } else {
            alert("Failed to delete student.");
        }
    }

    async function downloadExcel() {
        const link = document.createElement('a');
        link.href = `${apiBaseUrl}/export`;
        link.download = "Students.xlsx";
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }

    async function loadAllStudents() {
        const tableDiv = document.getElementById("studentTable");
        const response = await fetch(apiBaseUrl);
        if (response.ok) {
            const students = await response.json();
            if (students.length === 0) {
                tableDiv.innerHTML = "<p>No students found.</p>";
                return;
            }

            let html = `
                <table>
                   <thead>
                     <tr>
                      <th><input type="text" id="filterName" placeholder="Search Name" oninput="filterTable()" /></th>
                      <th><input type="text" id="filterCity" placeholder="Search City" oninput="filterTable()" /></th>
                      <th><input type="text" id="filterState" placeholder="Search State" oninput="filterTable()" /></th>
                      <th><input type="text" id="filterYear" placeholder="Search Year" oninput="filterTable()" /></th>
                      <th><button onclick="resetFilters()">Reset</button></th>
                     </tr>
                   <tr>
                       <th onclick="sortTable(0)">Name ⬍</th>
                       <th onclick="sortTable(1)">City ⬍</th>
                       <th onclick="sortTable(2)">State ⬍</th>
                       <th onclick="sortTable(3)">College Year ⬍</th>
                       <th>Action</th>
                   </tr>
              </thead>
                <tbody>
            `;



            students.forEach(s => {
                html += `
                    <tr>
                        <td>${s.name}</td>
                        <td>${s.city}</td>
                        <td>${s.state}</td>
                        <td>${s.collegeYear}</td>
                        <td>
                               <button style="background-color: white; font-size: 16px;" title="Delete" onclick="deleteStudentByName('${s.name}')">🗑️</button>
                               <button style="background-color: white; font-size: 16px;" title="Edit" onclick='editStudent(${JSON.stringify(s)})'>✏️</button>
                        </td>
                    </tr>
                `;
            });

            html += `</tbody></table>`;
            tableDiv.innerHTML = html;
        } else {
            tableDiv.innerHTML = "<p>Failed to load students.</p>";
        }
    }
    function editStudent(student) {
        document.getElementById("modalName").value = student.name;
        document.getElementById("modalCity").value = student.city;
        document.getElementById("modalState").value = student.state;
        document.getElementById("modalCollegeYear").value = student.collegeYear;

        // Disable name input to prevent changing primary identifier (or keep it editable if you prefer)
        document.getElementById("modalName").disabled = true;

        showAddModal();

        // Change add button to update
        const addBtn = document.querySelector("#addModal button[onclick='addFromModal()']");
        addBtn.innerText = "Update";
        addBtn.onclick = function () {
            updateStudent(student.name);
        };
    }
    async function updateStudent(originalName) {
        const student = {
            name: document.getElementById('modalName').value,
            city: document.getElementById('modalCity').value,
            state: document.getElementById('modalState').value,
            collegeYear: parseInt(document.getElementById('modalCollegeYear').value)
        };

        const response = await fetch(`${apiBaseUrl}/by-name?name=${encodeURIComponent(originalName)}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(student)
        });

        if (response.ok) {
            hideAddModal();
            loadAllStudents();
        } else {
            alert("Failed to update student.");
        }
    }
    function showAddModal() {
        document.getElementById("addModal").style.display = "block";
        document.getElementById("modalName").disabled = false;
        const addBtn = document.querySelector("#addModal button[onclick]");
        addBtn.innerText = "Add";
        addBtn.onclick = addFromModal;
    }

    function filterTable() {
        const nameFilter = document.getElementById("filterName").value.toLowerCase();
        const cityFilter = document.getElementById("filterCity").value.toLowerCase();
        const stateFilter = document.getElementById("filterState").value.toLowerCase();
        const yearFilter = document.getElementById("filterYear").value.toLowerCase();

        const rows = document.querySelectorAll("#studentTable tbody tr");

        rows.forEach(row => {
            const cells = row.querySelectorAll("td");

            let [name, city, state, year] = Array.from(cells).slice(0, 4).map(cell => cell.textContent.toLowerCase());

            const match =
                name.startsWith(nameFilter) &&
                city.startsWith(cityFilter) &&
                state.startsWith(stateFilter) &&
                year.startsWith(yearFilter);

            row.style.display = match ? "" : "none";

            // Highlight matches
            if (match) {
                highlightText(cells[0], nameFilter);
                highlightText(cells[1], cityFilter);
                highlightText(cells[2], stateFilter);
                highlightText(cells[3], yearFilter);
            }
        });
    }

    function highlightText(cell, filter) {
        if (!filter) {
            cell.innerHTML = cell.textContent;
            return;
        }
        const text = cell.textContent;
        const index = text.toLowerCase().indexOf(filter);
        if (index >= 0) {
            const match = text.substring(index, index + filter.length);
            const highlighted = `<mark>${match}</mark>`;
            cell.innerHTML = text.substring(0, index) + highlighted + text.substring(index + filter.length);
        }
    }
    function resetFilters() {
        document.getElementById("filterName").value = "";
        document.getElementById("filterCity").value = "";
        document.getElementById("filterState").value = "";
        document.getElementById("filterYear").value = "";
        filterTable();
    }
    let currentSortColumn = null;
    let sortAscending = true;

    function sortTable(colIndex) {
        const tbody = document.querySelector("#studentTable tbody");
        const rows = Array.from(tbody.querySelectorAll("tr"))
            .filter(row => row.style.display !== "none");

        rows.sort((a, b) => {
            const cellA = a.children[colIndex].textContent.trim().toLowerCase();
            const cellB = b.children[colIndex].textContent.trim().toLowerCase();

            if (cellA < cellB) return sortAscending ? -1 : 1;
            if (cellA > cellB) return sortAscending ? 1 : -1;
            return 0;
        });

        // Flip direction if clicking the same column again
        if (currentSortColumn === colIndex) sortAscending = !sortAscending;
        else sortAscending = true;
        currentSortColumn = colIndex;

        // Clear and re-add sorted rows
        tbody.innerHTML = "";
        rows.forEach(row => tbody.appendChild(row));
    }

    window.onload = loadAllStudents;
</script>